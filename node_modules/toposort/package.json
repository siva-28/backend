{
  "_args": [
    [
      {
        "raw": "toposort@^2.0.2",
        "scope": null,
        "escapedName": "toposort",
        "name": "toposort",
        "rawSpec": "^2.0.2",
        "spec": ">=2.0.2 <3.0.0",
        "type": "range"
      },
      "/home/siva-m/k/ceg/server/ceg-server/node_modules/loopback-boot"
    ]
  ],
  "_from": "toposort@>=2.0.2 <3.0.0",
  "_id": "toposort@2.0.2",
  "_inCache": true,
  "_location": "/toposort",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/toposort_2.0.2_1524919840757_0.7718593122946391"
  },
  "_npmUser": {
    "name": "marcelklehr",
    "email": "mklehr@gmx.net"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "toposort@^2.0.2",
    "scope": null,
    "escapedName": "toposort",
    "name": "toposort",
    "rawSpec": "^2.0.2",
    "spec": ">=2.0.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/loopback-boot"
  ],
  "_resolved": "https://registry.npmjs.org/toposort/-/toposort-2.0.2.tgz",
  "_shasum": "ae21768175d1559d48bef35420b2f4962f09c330",
  "_shrinkwrap": null,
  "_spec": "toposort@^2.0.2",
  "_where": "/home/siva-m/k/ceg/server/ceg-server/node_modules/loopback-boot",
  "author": {
    "name": "Marcel Klehr",
    "email": "mklehr@gmx.net"
  },
  "bugs": {
    "url": "https://github.com/marcelklehr/toposort/issues"
  },
  "dependencies": {},
  "description": "Topological sort of directed ascyclic graphs (like dependecy lists)",
  "devDependencies": {
    "vows": "0.7.x"
  },
  "directories": {},
  "dist": {
    "shasum": "ae21768175d1559d48bef35420b2f4962f09c330",
    "tarball": "https://registry.npmjs.org/toposort/-/toposort-2.0.2.tgz",
    "fileCount": 10,
    "unpackedSize": 16683,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5G4hCRA9TVsSAnZWagAAMWAP/1pOqIoAcYduNqCc9ar3\nTQVxOxCT3pTjVbwyoHgjSGTUGD9tKUgWeZbqPZ1HwG3PkSTUU5Us/nNuwFUy\nSPciEH3B5OSuWRQGbiGXB6Cxwuduc3Nb72SPwAHpi5joxVZXcF84RytuT5lx\nRozb6a0DV9l1M83IGDvHWAfto1ZiLtS/Y5OePmeQrGn9QgXd2uyVEmTny+5R\nO2hIZWbiPQjCl2M3/ZN+ALrTHS/w45w6f9JO/2XeKOeljTPlkOh55dWfDoV/\nWjO4wYFArsGAzsXt8V76UDqzb2EuB6Xs8/F2mX+G+mr1XynY+XqK0d5nUqJ0\nqZUAaTXaUNRMI6bG0YE4pgn7LPrznqR1Jwh2OeZSxFL+IlLPau/hgDzyLWj+\nUn6sCg2PkD5aVzXXDbXJk2UpQ1IdQId73yJtWIAa5Llt6NM0mK4RYGrQocxI\ntSLyYNT/3bon8L5yxeQVGoM8AWL9bSlkNqYmWIVKOZxzELdWwmImAAaUUDU8\nvg8qAvMiOwCqQtq0juWI7Bu5voxnnihRBgIOaj4hyY87mn0SV2ucu7YMWjhi\nVWiy/qoALt9C0kZ4z7aPKU4teEofFukEhcxzySfzKq8BtCC49cisJW/017hc\nK9mEa5H3Et85d5gg6vGbHbtE5O0Zh2focrpm/C2HpVKAxptjQrpeC3ZM0LAH\n2nsv\r\n=lOS+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "3e3d72d1b48196ab0e87348d142ef23788a5bb67",
  "homepage": "https://github.com/marcelklehr/toposort#readme",
  "keywords": [
    "topological",
    "sort",
    "sorting",
    "graphs",
    "graph",
    "dependency",
    "list",
    "dependencies",
    "acyclic"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "marcelklehr",
      "email": "mklehr@gmx.net"
    }
  ],
  "name": "toposort",
  "optionalDependencies": {},
  "readme": "# Toposort\n\nSort directed acyclic graphs\n\n[![Build Status](https://travis-ci.org/marcelklehr/toposort.png)](https://travis-ci.org/marcelklehr/toposort)\n\n## Installation\n\n`npm install toposort` or `component install marcelklehr/toposort`  \n\nthen in your code:\n\n```js\ntoposort = require('toposort')\n```\n\n## Usage\nWe want to sort the following graph.\n\n![graph](https://cdn.rawgit.com/marcelklehr/toposort/8b14e9fd/graph.svg)\n\n```js\n// First, we define our edges.\nvar graph = [\n  ['put on your shoes', 'tie your shoes']\n, ['put on your shirt', 'put on your jacket']\n, ['put on your shorts', 'put on your jacket']\n, ['put on your shorts', 'put on your shoes']\n]\n\n\n// Now, sort the vertices topologically, to reveal a legal execution order.\ntoposort(graph)\n// [ 'put on your shirt'\n// , 'put on your shorts'\n// , 'put on your jacket'\n// , 'put on your shoes'\n// , 'tie your shoes' ]\n```\n\n(Note that there is no defined order for graph parts that are not connected\n -- you could also put on your jacket after having tied your shoes...)\n\n### Sorting dependencies\nIt is usually more convenient to specify *dependencies* instead of \"sequences\".\n```js\n// This time, edges represent dependencies.\nvar graph = [\n  ['tie your shoes', 'put on your shoes']\n, ['put on your jacket', 'put on your shirt']\n, ['put on your shoes', 'put on your shorts']\n, ['put on your jacket', 'put on your shorts']\n]\n\ntoposort(graph) \n// [ 'tie your shoes'\n// , 'put on your shoes'\n// , 'put on your jacket'\n// , 'put on your shirt'\n// , 'put on your shorts' ]\n\n// Now, reversing the list will reveal a legal execution order.\ntoposort(graph).reverse() \n// [ 'put on your shorts'\n// , 'put on your shirt'\n// , 'put on your jacket'\n// , 'put on your shoes'\n// , 'tie your shoes' ]\n```\n\n## API\n\n### toposort(edges)\n\n+ edges {Array} An array of directed edges describing a graph. An edge looks like this: `[node1, node2]` (vertices needn't be strings but can be of any type).\n\nReturns: {Array} a list of vertices, sorted from \"start\" to \"end\"\n\nThrows an error if there are any cycles in the graph.\n\n### toposort.array(nodes, edges)\n\n+ nodes {Array} An array of nodes\n+ edges {Array} An array of directed edges. You don't need to mention all `nodes` here.\n\nThis is a convenience method that allows you to define nodes that may or may not be connected to any other nodes. The ordering of unconnected nodes is not defined.\n\nReturns: {Array} a list of vertices, sorted from \"start\" to \"end\"\n\nThrows an error if there are any cycles in the graph.\n\n## Tests\n\nRun the tests with `node test.js`.\n\n## Legal\n\nMIT License\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/marcelklehr/toposort.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "2.0.2"
}
