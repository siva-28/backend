{
  "_args": [
    [
      {
        "raw": "loopback-connector-mongodb@^4.0.0",
        "scope": null,
        "escapedName": "loopback-connector-mongodb",
        "name": "loopback-connector-mongodb",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/home/siva-m/k/ceg/ceg-server"
    ]
  ],
  "_from": "loopback-connector-mongodb@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "loopback-connector-mongodb@4.0.0",
  "_location": "/loopback-connector-mongodb",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/loopback-connector-mongodb_4.0.0_1541520736227_0.41787001565533166"
  },
  "_npmUser": {
    "name": "dhmlau",
    "email": "dianahmlau@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "loopback-connector-mongodb@^4.0.0",
    "scope": null,
    "escapedName": "loopback-connector-mongodb",
    "name": "loopback-connector-mongodb",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/loopback-connector-mongodb/-/loopback-connector-mongodb-4.0.0.tgz",
  "_shasum": "825a60fbfef508234903423f12f685818e51c941",
  "_shrinkwrap": null,
  "_spec": "loopback-connector-mongodb@^4.0.0",
  "_where": "/home/siva-m/k/ceg/ceg-server",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-mongodb/issues"
  },
  "contributors": [
    {
      "name": "Miroslav Bajtos",
      "url": "https://github.com/bajtos"
    },
    {
      "name": "Raymond Feng",
      "url": "https://github.com/raymondfeng"
    },
    {
      "name": "Ritchie Martori",
      "url": "https://github.com/ritch"
    },
    {
      "name": "Simon Ho",
      "url": "https://github.com/superkhau"
    }
  ],
  "dependencies": {
    "async": "^2.6.1",
    "bson": "^1.0.6",
    "debug": "^3.1.0",
    "loopback-connector": "^4.5.0",
    "mongodb": "^3.1.4",
    "strong-globalize": "^4.1.1"
  },
  "description": "The official MongoDB connector for the LoopBack framework.",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "bluebird": "^3.5.2",
    "eslint": "^5.1.0",
    "eslint-config-loopback": "^10.0.0",
    "loopback-datasource-juggler": "^3.23.0",
    "mocha": "^5.2.0",
    "rc": "^1.2.8",
    "semver": "^5.5.1",
    "should": "^13.2.1",
    "sinon": "^6.1.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-iNV7MSotKRKp5APODbp8b/TUlTQq3OT8/XRuIHmrdNbdrdTx143Yk5tT+lI9V5T7Vp2sAGoZV5dPO51W5sy+1g==",
    "shasum": "825a60fbfef508234903423f12f685818e51c941",
    "tarball": "https://registry.npmjs.org/loopback-connector-mongodb/-/loopback-connector-mongodb-4.0.0.tgz",
    "fileCount": 42,
    "unpackedSize": 115344,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb4b1gCRA9TVsSAnZWagAAsBgP/3U6CYLRkaGtq7AlUqh6\nZqePgpervCb4kvMH4M2zeFp+lEZErBfGQSi6DoJVjkADXlBmVhM/owrY6lJI\niOHj7PJllgyXr36vl+9jHki6ottlEYs/ctGufJ5ZiGxRcd70unMVXOIXyXGO\nJn63/LQ1zGBtNEgj8raWfz4ODUSG8ABywCWZsalxe72TMeHowxixt0thWeYD\n4dFyWFHS08QWF0MGN/NgRos9PcU2T0tbeyN3OTiOBH8XvIe3HK8h97AxB2mf\nXSxmTyEj4eK7dqwLWUSq2NtT+hFca9CZdlJ6xsVkUqKINY045KxX2yThm8Ty\nwSucUEVGQTTaNhblR6dtuDKzjJVoDSm9Z5/kFqoCnfnOWayK6RkIWVYe8wyv\nCVHXakeTEz25zLIkEPrKWkKM4UEH/Q8f1gTDalqRDCstHKTXXTLGvW1Tq6fn\nuQX2TMtVYNHWhosc/i8liJoGojrcfpnLo9nNqx2aKGv56r3i0Lu3GIBT44kB\nvqVcr/4xvFQTgyB7vlj0ZOswj0m0rh/aVH7nSy1RjdtGMCbeV0gZ7gyg1Cr2\nHTR7kGJnT15Gz60oIoSmTSs2UdQ6Xlut7V5Mv3KVn985aBE5WDX55bwZS4Wr\nQ+Qk5ZX5Pktq+zVRtryDA1C2aNewsTJkxKHfUBFdKe3xRmrIffnyoJQPBeVA\na3+i\r\n=ieyK\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "260733d21e6d9cf73947c3dc08a53e650f37f766",
  "homepage": "https://github.com/strongloop/loopback-connector-mongodb#readme",
  "keywords": [
    "connector",
    "datasource",
    "loopback",
    "strongloop",
    "mongodb"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "0candy",
      "email": "ngcandy@ca.ibm.com"
    },
    {
      "name": "amir-61",
      "email": "amirali.jfr61@gmail.com"
    },
    {
      "name": "b-admike",
      "email": "binadmt@hotmail.com"
    },
    {
      "name": "bajtos",
      "email": "mbajtoss@gmail.com"
    },
    {
      "name": "davidcheung",
      "email": "davidcheung@live.ca"
    },
    {
      "name": "dhmlau",
      "email": "dianahmlau@gmail.com"
    },
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    },
    {
      "name": "jannyhou2016",
      "email": "juehou@ca.ibm.com"
    },
    {
      "name": "kjdelisle",
      "email": "kjdelisle@gmail.com"
    },
    {
      "name": "kraman",
      "email": "kraman@gmail.com"
    },
    {
      "name": "mahesh.patsute",
      "email": "mahesh.patsute@ibm.com"
    },
    {
      "name": "qpresley",
      "email": "qpresley@ca.ibm.com"
    },
    {
      "name": "rashmihunt",
      "email": "rashmihunt@gmail.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    },
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    },
    {
      "name": "rmg",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "superkhau",
      "email": "superkhau@gmail.com"
    },
    {
      "name": "thegman",
      "email": "gpandya@live.com"
    },
    {
      "name": "tonyf-ibm",
      "email": "tffrench@us.ibm.com"
    },
    {
      "name": "virkt25",
      "email": "taranveer@virk.cc"
    }
  ],
  "name": "loopback-connector-mongodb",
  "optionalDependencies": {},
  "readme": "# loopback-connector-mongodb\n\nThe official MongoDB connector for the LoopBack framework.\n\nPlease see the full documentation at [loopback.io](http://loopback.io/doc/en/lb3/MongoDB-connector.html).\n\n## Installation\n\nIn your application root directory, enter this command to install the connector:\n\n```sh\nnpm install loopback-connector-mongodb --save\n```\n\nThis installs the module from npm and adds it as a dependency to the application's `package.json` file.\n\nIf you create a MongoDB data source using the data source generator as described below, you don't have to do this, since the generator will run `npm install` for you.\n\n## Creating a MongoDB data source\n\nUse the [Data source generator](http://loopback.io/doc/en/lb3/Data-source-generator.html) to add a MongoDB data source to your application.  \nThe generator will prompt for the database server hostname, port, and other settings\nrequired to connect to a MongoDB database.  It will also run the `npm install` command above for you.\n\nThe entry in the application's `/server/datasources.json` will look like this:\n\n```javascript\n\"mydb\": {\n  \"host\": \"myserver\",\n  \"port\": 27017,\n  \"url\":  \"\",\n  \"database\": \"test\",\n  \"password\": \"mypassword\",\n  \"name\": \"mydb\",\n  \"user\": \"me\",\n  \"authSource\" : \"admin\",\n  \"connector\": \"mongodb\"\n}\n```\n\nEdit `datasources.json` to add any other additional properties that you require.\n\n### Connection properties\n\n| Property | Type&nbsp;&nbsp; | Description |\n| --- | --- | --- |\n| connector | String | Connector name, either `\"loopback-connector-mongodb\"` or `\"mongodb\"`. |\n| database | String | Database name |\n| host | String | Database host name |\n| password | String | Password to connect to database |\n| port | Number | Database TCP port |\n| url | String | Connection URL of form `mongodb://user:password@host/db`. Overrides other connection settings (see below). |\n| user | String | Username to connect to database |\n| authSource | String | Authentification database name (optional). Usually `\"admin\"` value. |\n\nIf you run a MongoDB with authentification ([Docker's example here](https://github.com/docker-library/docs/tree/master/mongo#mongo_initdb_root_username-mongo_initdb_root_password)), you need to specify which database to authenticate against. More details can be found in [MongoDB documentation on Authentification Methods](https://docs.mongodb.com/manual/core/authentication/#authentication-methods). The default value is usually `\"admin\"`, like in the official docker image.\n\n**NOTE**: In addition to these properties, you can use additional Single Server Connection parameters supported by [`node-mongodb-native`](http://mongodb.github.io/node-mongodb-native/core/driver/reference/connecting/connection-settings/).\n\n### Additional properties\n\n- **allowExtendedOperators**: Set to `true` to enable using MongoDB operators such as\n`$currentDate`, `$inc`, `$max`, `$min`, `$mul`, `$rename`, `$setOnInsert`, `$set`, `$unset`, `$addToSet`,\n`$pop`, `$pullAll`, `$pull`, `$pushAll`, `$push`, and `$bit`.  Default is `false`.\n- **enableGeoIndexing**: Set to `true` to enable 2dsphere indexing for model properties\nof type `GeoPoint`. This allows for indexed ```near``` queries.  Default is `false`.\n- **lazyConnect**: \n  - Default is `false`.\n  - If set to `true`, the database instance will not be attached to the datasource and the connection is deferred.\n  - It will try to establish the connection automatically once users hit the endpoint. If the mongodb server is offline, the app will start, however, the endpoints will not work.\n- **disableDefaultSort**: Set to `true` to disable the default sorting\n  behavior on `id` column, this will help performance using indexed columns available in mongodb.\n- **collation**: Specify language-specific rules for string comparison, such as rules for lettercase and accent marks. See [`MongdoDB documentation`](https://docs.mongodb.com/manual/reference/collation/) for details. It can also be used to create [`case insensitive indexes`](https://docs.mongodb.com/manual/core/index-case-insensitive/).\n\n### Setting the url property in datasource.json\n\nYou can set the `url` property to a connection URL in `datasources.json` to override individual connection parameters such as `host`, `user`, and `password`.  \n\nAdditionally, you can override the global `url` property in environment-specific data source configuration files, for example for production in `datasources.production.json`, and use the individual connection parameters `host`, `user`, `password`, and `port`.  To do this, you _must_ set `url` to `false`, null, or “” (empty string).\nIf you set `url` to `undefined` or remove the `url` property altogether, the override will not work.\n\nFor example, for production, use `datasources.production.json` as follows (for example) to overide the `url` setting in `datasources.json:\n\n```javascript\n\"mydb\": {\n  \"host\": \"myserver\",\n  \"port\": 27017,\n  \"url\":  false,\n  \"database\": \"test\",\n  \"password\": \"mypassword\",\n  \"name\": \"mydb\",\n  \"user\": \"me\",\n  \"connector\": \"mongodb\"  \n}\n```\n\nFor more information on setting data source configurations for different environments, see [Environment-specific configuration](https://loopback.io/doc/en/lb3/Environment-specific-configuration.html#data-source-configuration).\n\n## Security Considerations\n\nMongoDB Driver allows the `$where` operator to pass in JavaScript to execute on the Driver which can be used for NoSQL Injection. See [MongoDB: Server-side JavaScript](https://docs.mongodb.com/manual/core/server-side-javascript/) for more on this MongoDB feature.\n\nTo protect users against this potential vulnerability, LoopBack will automatically **remove** the `$where` and `mapReduce` operators from a query before it's passed to the MongoDB Driver. If you need to use these properties from within LoopBack programatically, you can disable the sanitization by passing in an `options` object with `disableSanitization` property set to `true`.\n\n**Example:**\n```js\nPost.find(\n    {where: {$where: 'function() { /*JS function here*/}'}},\n    {disableSanitization: true},\n    (err, p) => {\n        // code to handle results / error.\n    }\n);\n```\n\n## Type mappings\n\nSee [LoopBack types](http://loopback.io/doc/en/lb3/LoopBack-types.html) for details on LoopBack's data types.\n\n### LoopBack to MongoDB types\n\nType conversion is mainly handled by Mongodb. See ['node-mongodb-native'](http://mongodb.github.io/node-mongodb-native/) for details.\n\n## Customizing MongoDB configuration for tests/examples\n\nBy default, examples and tests from this module assume there is a MongoDB server\ninstance running on localhost at port 27017.\n\nTo customize the settings, you can drop in a `.loopbackrc` file to the root directory\nof the project or the home folder.\n\n**Note**: Tests and examples in this project configure the data source using the deprecated '.loopbackrc' file method,\nwhich is not suppored in general.\nFor information on configuring the connector in a LoopBack application, please refer to [loopback.io](http://loopback.io/doc/en/lb2/MongoDB-connector.html).\n\nThe .loopbackrc file is in JSON format, for example:\n\n    {\n        \"dev\": {\n            \"mongodb\": {\n                \"host\": \"127.0.0.1\",\n                \"database\": \"test\",\n                \"user\": \"youruser\",\n                \"password\": \"yourpass\",\n                \"port\": 27017\n            }\n        },\n        \"test\": {\n            \"mongodb\": {\n                \"host\": \"127.0.0.1\",\n                \"database\": \"test\",\n                \"user\": \"youruser\",\n                \"password\": \"yourpass\",\n                \"port\": 27017\n            }\n        }\n    }\n\n**Note**: user/password is only required if the MongoDB server has authentication enabled. `\"authSource\"` should be used if you cannot login to your database using your credentials.\n\n## Running tests\n\n### Own instance\nIf you have a local or remote MongoDB instance and would like to use that to run the test suite, use the following command:\n- Linux\n```bash\nMONGODB_HOST=<HOST> MONGODB_PORT=<PORT> MONGODB_DATABASE=<DATABASE> CI=true npm test\n```\n- Windows\n```bash\nSET MONGODB_HOST=<HOST> SET MONGODB_PORT=<PORT> SET MONGODB_DATABASE=<DATABASE> SET CI=true npm test\n```\n\n### Docker\nIf you do not have a local MongoDB instance, you can also run the test suite with very minimal requirements.\n- Assuming you have [Docker](https://docs.docker.com/engine/installation/) installed, run the following script which would spawn a MongoDB instance on your local:\n```bash\nsource setup.sh <HOST> <PORT> <DATABASE>\n```\nwhere `<HOST>`, `<PORT>` and `<DATABASE>` are optional parameters. The default values are `localhost`, `27017` and `testdb` respectively.\n- Run the test:\n```bash\nnpm test\n```\n\n### Leak detection\n\nTests run for 100 iterations by default, but can be increased by setting the\nenv var `ITERATIONS`.\n\n```\nmake leak-detection # run 100 iterations (default)\n```\n\nor\n\n```\nITERATIONS=1000 make leak-detection # run 1000 iterations\n```\n\n## Running benchmarks\n\n**Benchmarks must be run on a Unix-like operating system.**\n\n```\nmake benchmarks\n```\n\nThe results will be output in `./benchmarks/results.md`.\n\n## strictObjectIDCoercion flag\n\nIn version 1.17.0, the id of string type is being converted to ObjectID, when the string length is 12 or 24 and has the format of an ObjectID i.e /^[0-9a-fA-F]{24}$/.\nTo avoid this issue, the strictObjectIDCoercion flag should be set to true in the model-definition file. It is also possible to enable this flag on a per method bases by passing it in as part of the options object.\n\n### model-definition.js\n\n```js\n{\n  \"name\": \"myModelName\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": false,\n  \"options\": {\n    \"validateUpsert\": true,\n    \"strictObjectIDCoercion\": true\n  },\n...\n}\n```\nboot-script.js\n\n```js\n'use strict';\nvar util = require('util');\n\nmodule.exports = function(app) {\n  var db = app.dataSources.mongoDs;\n  var myModelName = app.models.myModelName;\n\n  db.automigrate(function(err) {\n    if (err) throw err;\n    console.log('Automigrate complete');\n\n    myModelName.create([{\n      id: '59460487e9532ae90c324b59',\n      name: 'Bob',\n    }, {\n      id: '59460487e9532ae90c324b5a',\n      name: 'Sam',\n    }, {\n      id: '420',\n      name: 'Foo',\n      age: 1,\n    }, {\n      id: '21',\n      name: 'Bar',\n    }], function(err, result) {\n      if (err) throw err;\n      console.log('\\nCreated instances of myModelName: ' + util.inspect(result, 4));\n\n      myModelName.find({where: {id: {inq: ['59460487e9532ae90c324b59',\n        '59460487e9532ae90c324b5a']}}},\n      function(err, result) {\n        if (err) throw err;\n        console.log('\\nFound instance with inq: ' + util.inspect(result, 4));\n      });\n    });\n  });\n};\n```\n\n### Per method basis\n\n```js\nmyModelName.find(\n  {where: {id: {inq: ['59460487e9532ae90c324b59', '59460487e9532ae90c324b5a']}}},\n  {strictObjectIDCoercion: true},\n  function(err, result) {\n    // ... \n  }\n)\n```\n\n## Release notes\n\n  * 1.1.7 - Do not return MongoDB-specific _id to client API, except if specifically specified in the model definition\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/strongloop/loopback-connector-mongodb.git"
  },
  "scripts": {
    "benchmarks": "make benchmarks",
    "leak-detection": "make leak-detection",
    "lint": "eslint .",
    "posttest": "npm run lint",
    "test": "mocha"
  },
  "version": "4.0.0"
}
