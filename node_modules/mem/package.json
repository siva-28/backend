{
  "_args": [
    [
      {
        "raw": "mem@^4.0.0",
        "scope": null,
        "escapedName": "mem",
        "name": "mem",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/home/siva-m/k/ceg/server/ceg-server/node_modules/os-locale"
    ]
  ],
  "_from": "mem@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "mem@4.2.0",
  "_location": "/mem",
  "_nodeVersion": "8.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mem_4.2.0_1552412506855_0.4573656395957444"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mem@^4.0.0",
    "scope": null,
    "escapedName": "mem",
    "name": "mem",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/os-locale"
  ],
  "_resolved": "https://registry.npmjs.org/mem/-/mem-4.2.0.tgz",
  "_shasum": "5ee057680ed9cb8dad8a78d820f9a8897a102025",
  "_shrinkwrap": null,
  "_spec": "mem@^4.0.0",
  "_where": "/home/siva-m/k/ceg/server/ceg-server/node_modules/os-locale",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/mem/issues"
  },
  "dependencies": {
    "map-age-cleaner": "^0.1.1",
    "mimic-fn": "^2.0.0",
    "p-is-promise": "^2.0.0"
  },
  "description": "Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input",
  "devDependencies": {
    "ava": "^1.3.1",
    "delay": "^4.1.0",
    "tsd-check": "^0.3.0",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-5fJxa68urlY0Ir8ijatKa3eRz5lwXnRCTvo9+TbTGAuTFJOwpGcY0X05moBd0nW45965Njt4CDI2GFQoG8DvqA==",
    "shasum": "5ee057680ed9cb8dad8a78d820f9a8897a102025",
    "tarball": "https://registry.npmjs.org/mem/-/mem-4.2.0.tgz",
    "fileCount": 5,
    "unpackedSize": 9439,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJch+9bCRA9TVsSAnZWagAAZQwP/izKtmuKD3r2Kmojxv4a\nhbbncg0yv5WADMvbNTubLytnN5O/c1GKTa+0G2HKBz3rjwJ/4KX09bzgyBig\nVcjDkouItaLxtfOG6EpcvLo8iAzBO3YcqLclW4mDorGzE4ba0LipupjA45gr\n/rpfHfYEINoxCmsy2ALwQrD96UtwGpk1bf3BY5CNapzmUntG1BNhVMpdGzlS\nwsjdBpSagMd8jTWR6YwnyoqfZ5HpvJ2jsfDNXMM6fjAxUd1iC2vkdBFcvDch\npMr+YiU265XbyWz9j2QdJH75bb0Cbfa8Zm3lK9VM46mgqRL2sdNKYopUW3f7\nrKXgMBrub+rofpVRs8nsyhGcLywaD07i84J+f/HxT+65Z9BbkRo89axDeOA2\nLe0N3QuABlIy+KNZV0CqwSYSK2/YPaeJtM2IJztotOIs/VDpAADRfBlZ7zRG\nyezLarB124645gln+LI0KpgQi6HvscCtGWzRTRNWT4X3VZpa3Z7u1/Xp/yt1\nWN/7AoBMBx2OMiESL7VAsP/kSc3Nk5+O02pDCe3InDu2yu9DIDiC3SfVImK5\n2S5u5Yfjnp1vAuoHBZihXVIlJGBtJQNruEC91Z/9jljJrJfSzBZOXGbFT1HE\nX3WtmiBgBaNmBlvc7cJLpQIhbQeJnirBy+B63EZNywG2XX1XciD+nYeHadoq\noVhr\r\n=2Jn0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "6959d903627d24da2e31a9da686327daf86f2dda",
  "homepage": "https://github.com/sindresorhus/mem#readme",
  "keywords": [
    "memoize",
    "function",
    "mem",
    "memoization",
    "cache",
    "caching",
    "optimize",
    "performance",
    "ttl",
    "expire",
    "promise"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "mem",
  "optionalDependencies": {},
  "readme": "# mem [![Build Status](https://travis-ci.org/sindresorhus/mem.svg?branch=master)](https://travis-ci.org/sindresorhus/mem)\n\n> [Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input\n\nMemory is automatically released when an item expires.\n\n\n## Install\n\n```\n$ npm install mem\n```\n\n\n## Usage\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n\n##### Works fine with promise returning functions\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = async () => ++i;\nconst memoized = mem(counter);\n\n(async () => {\n\tconsole.log(await memoized());\n\t//=> 1\n\n\t// The return value didn't increase as it's cached\n\tconsole.log(await memoized());\n\t//=> 1\n})();\n```\n\n```js\nconst mem = require('mem');\nconst got = require('got');\nconst delay = require('delay');\n\nconst memGot = mem(got, {maxAge: 1000});\n\n(async () => {\n\tawait memGot('sindresorhus.com');\n\n\t// This call is cached\n\tawait memGot('sindresorhus.com');\n\n\tawait delay(2000);\n\n\t// This call is not cached as the cache has expired\n\tawait memGot('sindresorhus.com');\n})();\n```\n\n\n## API\n\n### mem(fn, [options])\n\n#### fn\n\nType: `Function`\n\nFunction to be memoized.\n\n#### options\n\nType: `Object`\n\n##### maxAge\n\nType: `number`<br>\nDefault: `Infinity`\n\nMilliseconds until the cache expires.\n\n##### cacheKey\n\nType: `Function`\n\nDetermines the cache key for storing the result based on the function arguments. By default, if there's only one argument and it's a [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive), it's used directly as a key, otherwise it's all the function arguments JSON stringified as an array.\n\nYou could for example change it to only cache on the first argument `x => JSON.stringify(x)`.\n\n##### cache\n\nType: `Object`<br>\nDefault: `new Map()`\n\nUse a different cache storage. Must implement the following methods: `.has(key)`, `.get(key)`, `.set(key, value)`, `.delete(key)`, and optionally `.clear()`. You could for example use a `WeakMap` instead or [`quick-lru`](https://github.com/sindresorhus/quick-lru) for a LRU cache.\n\n##### cachePromiseRejection\n\nType: `boolean`<br>\nDefault: `false`\n\nCache rejected promises.\n\n### mem.clear(fn)\n\nClear all cached data of a memoized function.\n\n#### fn\n\nType: `Function`\n\nMemoized function.\n\n\n## Tips\n\n### Cache statistics\n\nIf you want to know how many times your cache had a hit or a miss, you can make use of [stats-map](https://github.com/SamVerschueren/stats-map) as a replacement for the default cache.\n\n#### Example\n\n```js\nconst mem = require('mem');\nconst StatsMap = require('stats-map');\nconst got = require('got');\n\nconst cache = new StatsMap();\nconst memGot = mem(got, {cache});\n\n(async () => {\n\tawait memGot('sindresorhus.com');\n\tawait memGot('sindresorhus.com');\n\tawait memGot('sindresorhus.com');\n\n\tconsole.log(cache.stats);\n\t//=> {hits: 2, misses: 1}\n})();\n```\n\n\n## Related\n\n- [p-memoize](https://github.com/sindresorhus/p-memoize) - Memoize promise-returning & async functions\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/mem.git"
  },
  "scripts": {
    "test": "xo && ava && tsd-check"
  },
  "version": "4.2.0"
}
