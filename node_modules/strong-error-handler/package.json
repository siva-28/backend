{
  "_args": [
    [
      {
        "raw": "strong-error-handler@^3.0.0",
        "scope": null,
        "escapedName": "strong-error-handler",
        "name": "strong-error-handler",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/home/siva-m/k/ceg/server/ceg-server"
    ]
  ],
  "_from": "strong-error-handler@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "strong-error-handler@3.2.0",
  "_location": "/strong-error-handler",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/strong-error-handler_3.2.0_1535648611959_0.7115532594349627"
  },
  "_npmUser": {
    "name": "rfeng",
    "email": "enjoyjava@gmail.com"
  },
  "_npmVersion": "6.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "strong-error-handler@^3.0.0",
    "scope": null,
    "escapedName": "strong-error-handler",
    "name": "strong-error-handler",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/",
    "/strong-remoting"
  ],
  "_resolved": "https://registry.npmjs.org/strong-error-handler/-/strong-error-handler-3.2.0.tgz",
  "_shasum": "bda2a75849909c70512ee55b5df2cf4116271496",
  "_shrinkwrap": null,
  "_spec": "strong-error-handler@^3.0.0",
  "_where": "/home/siva-m/k/ceg/server/ceg-server",
  "browser": {
    "strong-error-handler": false
  },
  "bugs": {
    "url": "https://github.com/strongloop/strong-error-handler/issues"
  },
  "ci": {
    "downstreamIgnoreList": [
      "dashboard-controller"
    ]
  },
  "dependencies": {
    "@types/express": "^4.16.0",
    "accepts": "^1.3.3",
    "debug": "^3.1.0",
    "ejs": "^2.6.1",
    "http-status": "^1.1.2",
    "js2xmlparser": "^3.0.0",
    "strong-globalize": "^4.1.0"
  },
  "description": "Error handler for use in development and production environments.",
  "devDependencies": {
    "chai": "^4.1.2",
    "eslint": "^4.19.1",
    "eslint-config-loopback": "^10.0.0",
    "express": "^4.16.3",
    "mocha": "^5.2.0",
    "supertest": "^3.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WBU5itMkVPoEPf1W3ptb0AjtPvRWabDzVO4Lcy8MbJQUbo8vdWngLAcNQptQovdFoMGLgQAgJzZkelm6FRADuQ==",
    "shasum": "bda2a75849909c70512ee55b5df2cf4116271496",
    "tarball": "https://registry.npmjs.org/strong-error-handler/-/strong-error-handler-3.2.0.tgz",
    "fileCount": 34,
    "unpackedSize": 33460,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbiCNkCRA9TVsSAnZWagAAelAP/iVsYcN2DDuubaJFR4PX\nQaMhw93T6594WuAqxpL2g4xtS9IwFxdOCHTC3TT/E0rV1I01to6kgbUXyy3N\nEoq6HifE2N5Fp8KB25jD+nGldYOF/xzu1YzxXjXH6Iu/j5w+6R4jJtnOp68V\nIvz3YO28lVwhfBUWe7OLS97/ePLci0qhpwPvfR7/UdBlhI5QGYqNlQKtNmVc\ntEFxgBCAZOMpZ7Se6ze2XWvQ6tSvl95p1PH8HVHNVaLTia/JmPxYRwAUc+bE\nZNDEUoiJchW9FaosZt7SAn9d0mIK5w8AnFSTadH5ZFQ9ksdpzi6M0cfYa/Xc\nRc0Yo4YK7kUedVF0oDdYjE6NRhHr1xQLUW6OvHXil+3Jad0e5GWy/6tzP7fd\nxEq+xmAkLF48J9ICj01gETgaDm8zgaTqR3S7uIhQIYTAkxROX+UX3DIykTDz\nSezTjSsjpLnFFV93zjghzHAyufgcfzEZiBqedVe4GJdKDXrEf/GXN/PCURXd\nvJ2So2OmI85pKj0tFSqOiIRPvvXst+srH/KJ0HCSb2d5EdmbQXKjXGAm027l\nv2Frrxmn/QK7dXCxnmlYEEo++BUIqwOlG9k/uYfgNeihUwoQhKG5etPqFAiL\n2XDhFXQ+3u/qLA7q9N9YOUGC/UJsur3asTIiWIKukOJoFhODJZD/qkrK32/f\nIZF/\r\n=tIsW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "e7aa8353e772d75724aae6b2bff6c59d912b3bba",
  "homepage": "https://github.com/strongloop/strong-error-handler#readme",
  "license": "MIT",
  "main": "lib/handler.js",
  "maintainers": [
    {
      "name": "0candy",
      "email": "ngcandy@ca.ibm.com"
    },
    {
      "name": "amir-61",
      "email": "amirali.jfr61@gmail.com"
    },
    {
      "name": "b-admike",
      "email": "binadmt@hotmail.com"
    },
    {
      "name": "bajtos",
      "email": "mbajtoss@gmail.com"
    },
    {
      "name": "davidcheung",
      "email": "davidcheung@live.ca"
    },
    {
      "name": "dhmlau",
      "email": "dianahmlau@gmail.com"
    },
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    },
    {
      "name": "jannyhou2016",
      "email": "juehou@ca.ibm.com"
    },
    {
      "name": "kjdelisle",
      "email": "kjdelisle@gmail.com"
    },
    {
      "name": "kraman",
      "email": "kraman@gmail.com"
    },
    {
      "name": "mahesh.patsute",
      "email": "mahesh.patsute@ibm.com"
    },
    {
      "name": "qpresley",
      "email": "qpresley@ca.ibm.com"
    },
    {
      "name": "rashmihunt",
      "email": "rashmihunt@gmail.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    },
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    },
    {
      "name": "rmg",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "superkhau",
      "email": "superkhau@gmail.com"
    },
    {
      "name": "thegman",
      "email": "gpandya@live.com"
    },
    {
      "name": "tonyf-ibm",
      "email": "tffrench@us.ibm.com"
    },
    {
      "name": "virkt25",
      "email": "taranveer@virk.cc"
    }
  ],
  "name": "strong-error-handler",
  "optionalDependencies": {},
  "readme": "# strong-error-handler\n\nThis package is an error handler for use in both development (debug) and production environments.\n\nIn production mode, `strong-error-handler` omits details from error responses to prevent leaking sensitive information:\n\n- For 5xx errors, the output contains only the status code and the status name from the HTTP specification.\n- For 4xx errors, the output contains the full error message (`error.message`) and the contents of the `details`\n  property (`error.details`) that `ValidationError` typically uses to provide machine-readable details\n  about validation problems. It also includes `error.code` to allow a machine-readable error code to be passed\n  through which could be used, for example, for translation.\n\nIn debug mode, `strong-error-handler` returns full error stack traces and internal details of any error objects to the client in the HTTP responses.\n\n## Supported versions\n\nCurrent|Long Term Support|Maintenance\n:-:|:-:|:-:\n3.x|2.x|1.x\n\nLearn more about our LTS plan in [docs](http://loopback.io/doc/en/contrib/Long-term-support.html).\n\n## Installation\n\n```bash\n$ npm install --save strong-error-handler\n```\n\n## Use\n\nIn an Express-based application:\n\n```js\nvar express = require('express');\nvar errorHandler = require('strong-error-handler');\n\nvar app = express();\n// setup your routes\n// `options` are set to default values. For more info, see `options` below.\n// app.use(errorHandler({ /* options, see below */ }));\napp.use(errorHandler({\n  debug: app.get('env') === 'development',\n  log: true,\n}));\n\napp.listen(3000);\n```\n\nThe module also exports `writeErrorToResponse`, a non-middleware flavor of the\nerror handler:\n\n```js\nconst http = require('http');\nconst writeErrorToResponse = require('strong-error-handler')\n  .writeErrorToResponse;\nconst errHandlingOptions = {debug: process.env.NODE_ENV === 'development'}\n\nhttp\n  .createServer((req, res) => {\n    if (errShouldBeThrown) {\n      writeErrorToResponse(\n        new Error('something went wrong'),\n        req,\n        res,\n        errHandlingOptions,\n      );\n    }\n  })\n  .listen(3000);\n```\n\nIn LoopBack applications, add the following entry to `server/middleware.json`:\n\n```json\n{\n  \"final:after\": {\n    \"strong-error-handler\": {\n      \"params\": {\n         \"debug\": false,\n         \"log\": true\n       }\n    }\n  }\n}\n```\n\nIn general, `strong-error-handler` must be the last middleware function registered.\n\nThe above configuration will log errors to the server console, but not return stack traces in HTTP responses.\nFor details on configuration options, see below.\n\n### Response format and content type\n\nThe `strong-error-handler` package supports JSON, HTML and XML responses:\n\n- When the object is a standard Error object, it returns the string provided by the stack property in HTML/text\n  responses.\n- When the object is a non-Error object, it returns the result of `util.inspect` in HTML/text responses.\n- For JSON responses, the result is an object with all enumerable properties from the object in the response.\n\nThe content type of the response depends on the request's `Accepts` header.\n\n-  For Accepts header `json` or `application/json`, the response content type is JSON.\n-  For Accepts header `html` or `text/html`, the response content type is HTML.\n-  For Accepts header `xml` or `text/xml`, the response content type is XML.\n\n*There are plans to support other formats such as Plain-text.*\n\n## Options\n\n| Option | Type | Default | Description |\n| ---- | ---- | ---- | ---- |\n| debug | Boolean&nbsp;&nbsp;&nbsp; | `false` | If `true`, HTTP responses include all error properties, including sensitive data such as file paths, URLs and stack traces. See [Example output](#example) below. |\n| log | Boolean | `true` |  If `true`, all errors are printed via `console.error`, including an array of fields (custom error properties) that are safe to include in response messages (both 4xx and 5xx). <br/> If `false`, sends only the error back in the response. |\n| safeFields | [String] | `[]` |  Specifies property names on errors that are allowed to be passed through in 4xx and 5xx responses. See [Safe error fields](#safe-error-fields) below. |\n| defaultType | String | `\"json\"` | Specify the default response content type to use when the client does not provide any Accepts header.\n| negotiateContentType | Boolean | true | Negotiate the response content type via Accepts request header. When disabled, strong-error-handler will always use the default content type when producing responses. Disabling content type negotiation is useful if you want to see JSON-formatted error responses in browsers, because browsers usually prefer HTML and XML over other content types.\n\n### Customizing log format\n\n**Express** \n\nTo use a different log format, add your own custom error-handling middleware then disable `errorHandler.log`. \nFor example, in an Express application:\n\n```js\napp.use(myErrorLogger());\napp.use(errorHandler({ log: false }));\n```\n\nIn general, add `strong-error-handler` as the last middleware function, just before calling `app.listen()`.\n\n**LoopBack**\n\nFor LoopBack applications, put custom error-logging middleware in a separate file; for example, `server/middleware/error-logger.js`:\n\n```\nmodule.exports = function(options) {\n  return function logError(err, req, res, next) {\n    console.log('unhandled error' ,err);\n    next(err);\n  };\n};\n```\n\nThen in `server/middleware.json`, specify your custom error logging function as follows:\n\n```\n{\n  // ...\n  \"final:after\": {\n    \"./middleware/error-logger\": {},\n    \"strong-error-handler\": {\n      \"params\": {\n        \"log\": false\n      }\n    }\n}\n```\n\nThe default `middleware.development.json` file explicitly enables logging in strong-error-handler params, so you will need to change that file too.\n\n### Safe error fields\n\nBy default, `strong-error-handler` will only pass through the `name`, `message` and `details` properties of an error. Additional error\nproperties may be allowed through on 4xx and 5xx status code errors using the `safeFields` option to pass in an array of safe field names:\n\n```\n{\n  \"final:after\": {\n    \"strong-error-handler\": {\n      \"params\": {\n        \"safeFields\": [\"errorCode\"]\n      }\n    }\n}\n```\n\nUsing the above configuration, an error containing an `errorCode` property will produce the following response:\n\n```\n{\n  \"error\": {\n    \"statusCode\": 500,\n    \"message\": \"Internal Server Error\",\n    \"errorCode\": \"INTERNAL_SERVER_ERROR\"\n  }\n}\n```\n\n## Migration from old LoopBack error handler\n\nNOTE: This is only required for applications scaffolded with old versions of the `slc loopback` tool.\n\nTo migrate a LoopBack 2.x application to use `strong-error-handler`:\n\n1. In `package.json` dependencies, remove `\"errorhandler\": \"^x.x.x”,`\n1. Install the new error handler by entering the command:\n    <pre>npm install --save strong-error-handler</pre>\n1. In `server/config.json`, remove:\n    <pre>\n    \"remoting\": {\n      ...\n      \"errorHandler\": {\n        \"disableStackTrace\": false\n      }</pre>\n    and replace it with:\n    <pre>\n    \"remoting\": {\n      ...,\n      \"rest\": {\n        \"handleErrors\": false\n      }</pre>\n1. In `server/middleware.json`, remove:\n    <pre>\n    \"final:after\": {\n      \"loopback#errorHandler\": {}\n    }</pre>\n    and replace it with:\n    <pre>\n    \"final:after\": {\n      \"strong-error-handler\": {}\n    }</pre>\n1. Delete `server/middleware.production.json`.\n1. Create `server/middleware.development.json` containing:\n    <pre>\n    \"final:after\": {\n      \"strong-error-handler\": {\n        \"params\": {\n          \"debug\": true,\n          \"log\": true\n        }\n      }\n    }\n</pre>\n\nFor more information, see \n[Migrating apps to LoopBack 3.0](http://loopback.io/doc/en/lb3/Migrating-to-3.0.html#update-use-of-rest-error-handler).\n\n## Example\n\n5xx error generated when `debug: false` :\n\n```\n{ error: { statusCode: 500, message: 'Internal Server Error' } }\n```\n\nThe same error generated when `debug: true` :\n\n```\n{ error:\n  { statusCode: 500,\n  name: 'Error',\n  message: 'a test error message',\n  stack: 'Error: a test error message    \n  at Context.<anonymous> (User/strong-error-handler/test/handler.test.js:220:21)    \n  at callFnAsync (User/strong-error-handler/node_modules/mocha/lib/runnable.js:349:8)    \n  at Test.Runnable.run (User/strong-error-handler/node_modules/mocha/lib/runnable.js:301:7)    \n  at Runner.runTest (User/strong-error-handler/node_modules/mocha/lib/runner.js:422:10)    \n  at User/strong-error-handler/node_modules/mocha/lib/runner.js:528:12    \n  at next (User/strong-error-handler/node_modules/mocha/lib/runner.js:342:14)    \n  at User/strong-error-handler/node_modules/mocha/lib/runner.js:352:7    \n  at next (User/strong-error-handler/node_modules/mocha/lib/runner.js:284:14)    \n  at Immediate._onImmediate (User/strong-error-handler/node_modules/mocha/lib/runner.js:320:5)    \n  at tryOnImmediate (timers.js:543:15)    \n  at processImmediate [as _immediateCallback] (timers.js:523:5)' }}\n```\n\n4xx error generated when `debug: false` :\n\n```\n{ error:\n  { statusCode: 422,\n  name: 'Unprocessable Entity',\n  message: 'Missing required fields',\n  code: 'MISSING_REQUIRED_FIELDS' }}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/strongloop/strong-error-handler.git"
  },
  "scripts": {
    "lint": "eslint .",
    "posttest": "npm run lint",
    "test": "mocha"
  },
  "version": "3.2.0"
}
